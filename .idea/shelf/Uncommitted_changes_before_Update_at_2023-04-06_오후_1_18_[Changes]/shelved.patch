Index: back/reserve/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>plugins {\r\n\tid 'java'\r\n\tid 'org.springframework.boot' version '2.7.4'\r\n\tid 'io.spring.dependency-management' version '1.1.0'\r\n}\r\n\r\ngroup = 'sejong'\r\nversion = '0.0.1-SNAPSHOT'\r\n\r\nconfigurations {\r\n\tcompileOnly {\r\n\t\textendsFrom annotationProcessor\r\n\t}\r\n}\r\n\r\nrepositories {\r\n\tmavenCentral()\r\n}\r\n\r\ndependencies {\r\n\timplementation 'org.springframework.boot:spring-boot-starter-data-jpa'\r\n\timplementation 'org.springframework.boot:spring-boot-starter-web'\r\n\timplementation 'org.springframework.boot:spring-boot-starter-web-services'\r\n\timplementation 'org.springframework.boot:spring-boot-starter-webflux'\r\n\timplementation 'org.springframework.session:spring-session-core'\r\n\tcompileOnly 'org.projectlombok:lombok'\r\n\tdevelopmentOnly 'org.springframework.boot:spring-boot-devtools'\r\n//\truntimeOnly 'com.mysql:mysql-connector-j'\r\n\timplementation 'mysql:mysql-connector-java:8.0.32'\r\n//\timplementation 'org.mariadb.jdbc:mariadb-java-client'\r\n\tannotationProcessor 'org.projectlombok:lombok'\r\n\ttestImplementation 'org.springframework.boot:spring-boot-starter-test'\r\n\ttestImplementation 'io.projectreactor:reactor-test'\r\n//\timplementation 'com.h2database:h2'\r\n\r\n\t// Undertow 서블릿 컨테이너\r\n\timplementation 'org.springframework.boot:spring-boot-starter-undertow'\r\n}\r\n\r\ntasks.named('test') {\r\n\tuseJUnitPlatform()\r\n}\r\n\r\n// CLI 환경에서 자바 소스를 컴파일 할 때 적용할 옵션\r\ntasks.withType(JavaCompile) {\r\n\t// 프로젝트의 소스 파일 인코딩을 gradle에게 알려준다.\r\n\t// $javac -encoding UTF-8 ..\r\n\toptions.encoding = 'UTF-8'\r\n\r\n\t// 소스 파일을 작성할 때 사용할 자바 버전\r\n\tsourceCompatibility = '11'\r\n\r\n\t// 자바 클래스를 실행시킬 JVM의 최소 버전\r\n\ttargetCompatibility = '11'\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/back/reserve/build.gradle b/back/reserve/build.gradle
--- a/back/reserve/build.gradle	(revision 3f896db93b9de373429b9b35be7770b5e65558d4)
+++ b/back/reserve/build.gradle	(date 1680245218121)
@@ -35,6 +35,9 @@
 
 	// Undertow 서블릿 컨테이너
 	implementation 'org.springframework.boot:spring-boot-starter-undertow'
+
+	// csv파일 읽기 라이브러리
+	implementation 'com.opencsv:opencsv:5.5.2'
 }
 
 tasks.named('test') {
Index: back/reserve/src/main/java/sejong/reserve/domain/Member.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package sejong.reserve.domain;\r\n\r\nimport lombok.Getter;\r\nimport lombok.Setter;\r\nimport lombok.ToString;\r\n\r\nimport javax.persistence.*;\r\n\r\n@Entity\r\n@Getter  @Setter @ToString\r\n@Table(name = \"member\")\r\npublic class Member {\r\n    @Id @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    @Column(name = \"member_id\")\r\n    private Long id; // 에약자 번호\r\n    private String major; // 전공\r\n    @Column(name = \"sno\")\r\n    private String studentNo; // 학번\r\n    @Column(name = \"phn\")\r\n    private String phoneNo; // 전화번호\r\n    @Column(name = \"auth\")\r\n    private int authority; // 권한 0 < 1 < 2\r\n    private String name; // 회원의 이름\r\n    @Column(name = \"pwd\")\r\n    private String password;\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/back/reserve/src/main/java/sejong/reserve/domain/Member.java b/back/reserve/src/main/java/sejong/reserve/domain/Member.java
--- a/back/reserve/src/main/java/sejong/reserve/domain/Member.java	(revision 3f896db93b9de373429b9b35be7770b5e65558d4)
+++ b/back/reserve/src/main/java/sejong/reserve/domain/Member.java	(date 1680244865412)
@@ -13,6 +13,8 @@
     @Id @GeneratedValue(strategy = GenerationType.IDENTITY)
     @Column(name = "member_id")
     private Long id; // 에약자 번호
+
+
     private String major; // 전공
     @Column(name = "sno")
     private String studentNo; // 학번
Index: back/reserve/src/main/java/sejong/reserve/service/MemberService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package sejong.reserve.service;\r\n\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.transaction.annotation.Transactional;\r\nimport sejong.reserve.domain.Member;\r\nimport sejong.reserve.repository.MemberRepository;\r\n\r\n@Service\r\n@RequiredArgsConstructor\r\n@Transactional\r\npublic class MemberService {\r\n    private final MemberRepository memberRepository;\r\n\r\n    public Long join(Member member) {\r\n        \r\n        return member.getId();\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/back/reserve/src/main/java/sejong/reserve/service/MemberService.java b/back/reserve/src/main/java/sejong/reserve/service/MemberService.java
--- a/back/reserve/src/main/java/sejong/reserve/service/MemberService.java	(revision 3f896db93b9de373429b9b35be7770b5e65558d4)
+++ b/back/reserve/src/main/java/sejong/reserve/service/MemberService.java	(date 1680246103205)
@@ -1,17 +1,36 @@
 package sejong.reserve.service;
 
 import lombok.RequiredArgsConstructor;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Service;
 import org.springframework.transaction.annotation.Transactional;
 import sejong.reserve.domain.Member;
 import sejong.reserve.repository.MemberRepository;
 
+import javax.persistence.EntityManager;
+import java.util.List;
+
 @Service
 @RequiredArgsConstructor
-@Transactional
+@Transactional@Slf4j
 public class MemberService {
+
+    @Autowired
+    private EntityManager entityManager;
+
+    public void saveMembers(List<Member> members){
+        log.info("멤버 저장 실행");
+        members.forEach(member -> entityManager.persist(member));
+    }
+
+    @Autowired
     private final MemberRepository memberRepository;
 
+    public boolean login(String studentNumber, Stirng password){
+        Member member = memberRepository.findByStudn
+    }
+
     public Long join(Member member) {
         
         return member.getId();
Index: back/reserve/src/main/java/sejong/reserve/repository/MemberRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package sejong.reserve.repository;\r\n\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.stereotype.Repository;\r\nimport sejong.reserve.domain.Member;\r\n\r\nimport javax.persistence.EntityManager;\r\nimport java.util.List;\r\n\r\n@Repository\r\n@RequiredArgsConstructor\r\npublic class MemberRepository {\r\n    private final EntityManager em;\r\n\r\n    public void save(Member member) {\r\n        em.persist(member);\r\n    }\r\n\r\n    public Member findOne(Long id) {\r\n        return em.find(Member.class, id);\r\n    }\r\n\r\n    public List<Member> findAll() {\r\n        return em.createQuery(\"select m from Member m\", Member.class)\r\n                .getResultList();\r\n    }\r\n\r\n    public List<Member> findByName(String name) {\r\n        return em.createQuery(\"select m from Member m where m.name = :name\", Member.class)\r\n                .setParameter(\"name\", name)\r\n                .getResultList();\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/back/reserve/src/main/java/sejong/reserve/repository/MemberRepository.java b/back/reserve/src/main/java/sejong/reserve/repository/MemberRepository.java
--- a/back/reserve/src/main/java/sejong/reserve/repository/MemberRepository.java	(revision 3f896db93b9de373429b9b35be7770b5e65558d4)
+++ b/back/reserve/src/main/java/sejong/reserve/repository/MemberRepository.java	(date 1680246216217)
@@ -1,6 +1,7 @@
 package sejong.reserve.repository;
 
 import lombok.RequiredArgsConstructor;
+import org.springframework.data.jpa.repository.JpaRepository;
 import org.springframework.stereotype.Repository;
 import sejong.reserve.domain.Member;
 
@@ -9,7 +10,7 @@
 
 @Repository
 @RequiredArgsConstructor
-public class MemberRepository {
+public class MemberRepository extends JpaRepository<Member, String> {
     private final EntityManager em;
 
     public void save(Member member) {
@@ -25,6 +26,7 @@
                 .getResultList();
     }
 
+
     public List<Member> findByName(String name) {
         return em.createQuery("select m from Member m where m.name = :name", Member.class)
                 .setParameter("name", name)
